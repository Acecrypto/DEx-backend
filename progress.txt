this document has my thought process while working

so first lets make a route to return hey
models have been created

one doubt is how are they getting the transaction after it is mined ? probably etherscan

second it find out when they are hitting events end point
what is return ticker being used for .


the orders endpoint gives out buy order and sell order both , it is used to get orders for a given tokens
toporders gives out all orders irrespective of token , then those orders are filtered at front end , probably
********
orders are the fulfilled orders

top orders are the pending orders
********
finally clear ho hi gya !


top order response analysis

bc , every order has same token get , so how do we know whether the order buy order or sell order ? oh !
so each order has an id which has either '_buy' or '_sell'.
amount is -ve when user wants to sell


yeah so its working we can form an item then push it to the collection, great !
 okay so ticker is nothing but the latest voyeah lume added

 issues right now - how to find out price
 -id of order is probably random with _buy or _sell suffix
 -rest of order is same as received
 -updated fi

 how to find out if the submitted order is buy or sell !!!!!

 yeah so last i knew we had to do 10 to power -6 or something to get the price and volume and that sort of stuff , today we finish off chain order book
 tomorrow we can see events and stuff

 okay so problem one is how to get decimals for a token
 solution : get abi from etherscan api -> get token address -> make web3 object -> query decimal()-> get ethprice -> divide by ethpricebase and get normal price

 sell order - price = ethAvailableVolumeBase/ethAvailableVolume
 ethAvailableVolumeBase= availableVolumeBase*10 to power -18
 ethAvailableVolume= availableVolume*10 to power -(number of decimals)

 okay so probably when a buy order is placed then the sell order is placed, the order object is simply copied . we have to follow logic from /orders

 making of logic now **
 ******I guess orders is for getting orders , top orders is for getting em in a sorted way , but how do they know which are open orders which are closed


BUY ORDER:
amount: message.amountGet,
      price: message.amountGive
        .div(message.amountGet)
        .mul(API.getDivisor(message.tokenGet))
        .div(API.getDivisor(message.tokenGive)),
      id: `${id}_buy`,
      order: message,

SELL ORDER:
amount: -message.amountGive,
      price: message.amountGet
        .div(message.amountGive)
        .mul(API.getDivisor(message.tokenGive))
        .div(API.getDivisor(message.tokenGet)),
      id: `${id}_sell`,
      order: message,
      updated: undefined,

the values are being created incorrectly have a look at that , getavailable volume too

