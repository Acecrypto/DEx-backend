this document has my thought process while working

so first lets make a route to return hey
models have been created

one doubt is how are they getting the transaction after it is mined ? probably etherscan

second it find out when they are hitting events end point
what is return ticker being used for .


the orders endpoint gives out buy order and sell order both , it is used to get orders for a given tokens
toporders gives out all orders irrespective of token , then those orders are filtered at front end , probably
********
orders are the fulfilled orders

top orders are the pending orders
********
finally clear ho hi gya !


top order response analysis

bc , every order has same token get , so how do we know whether the order buy order or sell order ? oh !
so each order has an id which has either '_buy' or '_sell'.
amount is -ve when user wants to sell


yeah so its working we can form an item then push it to the collection, great !
 okay so ticker is nothing but the latest voyeah lume added

 issues right now - how to find out price
 -id of order is probably random with _buy or _sell suffix
 -rest of order is same as received
 -updated fi

 how to find out if the submitted order is buy or sell !!!!!

 yeah so last i knew we had to do 10 to power -6 or something to get the price and volume and that sort of stuff , today we finish off chain order book
 tomorrow we can see events and stuff

 okay so problem one is how to get decimals for a token
 solution : get abi from etherscan api -> get token address -> make web3 object -> query decimal()-> get ethprice -> divide by ethpricebase and get normal price

 sell order - price = ethAvailableVolumeBase/ethAvailableVolume
 ethAvailableVolumeBase= availableVolumeBase*10 to power -18
 ethAvailableVolume= availableVolume*10 to power -(number of decimals)

 okay so probably when a buy order is placed then the sell order is placed, the order object is simply copied . we have to follow logic from /orders

 making of logic now **
 ******I guess orders is for getting orders , top orders is for getting em in a sorted way , but how do they know which are open orders which are closed


BUY ORDER:
amount: message.amountGet,
      price: message.amountGive
        .div(message.amountGet)
        .mul(API.getDivisor(message.tokenGet))
        .div(API.getDivisor(message.tokenGive)),
      id: `${id}_buy`,
      order: message,

SELL ORDER:
amount: -message.amountGive,
      price: message.amountGet
        .div(message.amountGive)
        .mul(API.getDivisor(message.tokenGive))
        .div(API.getDivisor(message.tokenGet)),
      id: `${id}_sell`,
      order: message,
      updated: undefined,

the values are being created incorrectly have a look at that , getavailable volume too
 understanding main.js and documenting for now , each function
now i understand the sell order for me is the buy order for someone else , hence its needed to maintain a record for both
which one to show but ? where the buy/sell order is mismatch !

getavailablevolume to be made

right now partial orders cant be made coz we are not getting available Volume from contract , right now we are assuming the order gets fully filled
toporders is exactly how it should be
order may need some hacking

order has one confusion , in the front end i can see there is no sorting for correct orders , do i have to sort order from backend and send or not
i cannot see any sorting for toporders too , but since toporder is proably used only for volumes there is no nee

api enpoints that are left are
/events and /returnticker


/events would be creative .. seeing

some questions for today , what is the use of blocknumber in the order and toporder api
so found the error have to return one order and blocknumber and then the orders inside the order

yay !!!! order and toporders working perfectly !!!!
just have to figure out the follwing things in order
1. how events are working
2. do i have to submit order from event
3. what does the blocknumber in the order and toporder do
4. getavailablevolume in /message.

GET ON IT !
 will increase the amount filled to full and when sending order will check if amount filled != amount req , should be simple enough

things to do on 30th
1. return ticker api endpoint
2  available Volume
3. dont send orders which are fulfilled (done)
4. expires amount (done)
5. top orders
the token exchange isnt visible in the deposit form and withdraw form , checking it
